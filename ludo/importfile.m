function Qtable8500 = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   QTABLE8500 = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   QTABLE8500 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   Qtable8500 = importfile('Qtable8500.txt', 1, 1);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/05/24 23:05:21

%% Initialize variables.
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%7s%2s%2s%2s%2s%8s%2s%2s%2s%2s%2s%2s%2s%2s%2s%2s%2s%2s%2s%2s%2s%2s%2s%8s%2s%8s%8s%2s%2s%6s%2s%8s%8s%8s%2s%8s%8s%2s%2s%8s%2s%8s%2s%2s%2s%2s%2s%2s%2s%8s%2s%2s%8s%8s%2s%8s%8s%2s%2s%8s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Remove white space around all cell columns.
dataArray{61} = strtrim(dataArray{61});

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]);
rawStringColumns = string(raw(:, 61));


%% Create output variable
Qtable8500 = table;
Qtable8500.VarName1 = cell2mat(rawNumericColumns(:, 1));
Qtable8500.VarName2 = cell2mat(rawNumericColumns(:, 2));
Qtable8500.VarName3 = cell2mat(rawNumericColumns(:, 3));
Qtable8500.VarName4 = cell2mat(rawNumericColumns(:, 4));
Qtable8500.VarName5 = cell2mat(rawNumericColumns(:, 5));
Qtable8500.VarName6 = cell2mat(rawNumericColumns(:, 6));
Qtable8500.VarName7 = cell2mat(rawNumericColumns(:, 7));
Qtable8500.VarName8 = cell2mat(rawNumericColumns(:, 8));
Qtable8500.VarName9 = cell2mat(rawNumericColumns(:, 9));
Qtable8500.VarName10 = cell2mat(rawNumericColumns(:, 10));
Qtable8500.VarName11 = cell2mat(rawNumericColumns(:, 11));
Qtable8500.VarName12 = cell2mat(rawNumericColumns(:, 12));
Qtable8500.VarName13 = cell2mat(rawNumericColumns(:, 13));
Qtable8500.VarName14 = cell2mat(rawNumericColumns(:, 14));
Qtable8500.VarName15 = cell2mat(rawNumericColumns(:, 15));
Qtable8500.VarName16 = cell2mat(rawNumericColumns(:, 16));
Qtable8500.VarName17 = cell2mat(rawNumericColumns(:, 17));
Qtable8500.VarName18 = cell2mat(rawNumericColumns(:, 18));
Qtable8500.VarName19 = cell2mat(rawNumericColumns(:, 19));
Qtable8500.VarName20 = cell2mat(rawNumericColumns(:, 20));
Qtable8500.VarName21 = cell2mat(rawNumericColumns(:, 21));
Qtable8500.VarName22 = cell2mat(rawNumericColumns(:, 22));
Qtable8500.VarName23 = cell2mat(rawNumericColumns(:, 23));
Qtable8500.VarName24 = cell2mat(rawNumericColumns(:, 24));
Qtable8500.VarName25 = cell2mat(rawNumericColumns(:, 25));
Qtable8500.VarName26 = cell2mat(rawNumericColumns(:, 26));
Qtable8500.VarName27 = cell2mat(rawNumericColumns(:, 27));
Qtable8500.VarName28 = cell2mat(rawNumericColumns(:, 28));
Qtable8500.VarName29 = cell2mat(rawNumericColumns(:, 29));
Qtable8500.VarName30 = cell2mat(rawNumericColumns(:, 30));
Qtable8500.VarName31 = cell2mat(rawNumericColumns(:, 31));
Qtable8500.VarName32 = cell2mat(rawNumericColumns(:, 32));
Qtable8500.VarName33 = cell2mat(rawNumericColumns(:, 33));
Qtable8500.VarName34 = cell2mat(rawNumericColumns(:, 34));
Qtable8500.VarName35 = cell2mat(rawNumericColumns(:, 35));
Qtable8500.VarName36 = cell2mat(rawNumericColumns(:, 36));
Qtable8500.VarName37 = cell2mat(rawNumericColumns(:, 37));
Qtable8500.VarName38 = cell2mat(rawNumericColumns(:, 38));
Qtable8500.VarName39 = cell2mat(rawNumericColumns(:, 39));
Qtable8500.VarName40 = cell2mat(rawNumericColumns(:, 40));
Qtable8500.VarName41 = cell2mat(rawNumericColumns(:, 41));
Qtable8500.VarName42 = cell2mat(rawNumericColumns(:, 42));
Qtable8500.VarName43 = cell2mat(rawNumericColumns(:, 43));
Qtable8500.VarName44 = cell2mat(rawNumericColumns(:, 44));
Qtable8500.VarName45 = cell2mat(rawNumericColumns(:, 45));
Qtable8500.VarName46 = cell2mat(rawNumericColumns(:, 46));
Qtable8500.VarName47 = cell2mat(rawNumericColumns(:, 47));
Qtable8500.VarName48 = cell2mat(rawNumericColumns(:, 48));
Qtable8500.VarName49 = cell2mat(rawNumericColumns(:, 49));
Qtable8500.VarName50 = cell2mat(rawNumericColumns(:, 50));
Qtable8500.VarName51 = cell2mat(rawNumericColumns(:, 51));
Qtable8500.VarName52 = cell2mat(rawNumericColumns(:, 52));
Qtable8500.VarName53 = cell2mat(rawNumericColumns(:, 53));
Qtable8500.VarName54 = cell2mat(rawNumericColumns(:, 54));
Qtable8500.VarName55 = cell2mat(rawNumericColumns(:, 55));
Qtable8500.VarName56 = cell2mat(rawNumericColumns(:, 56));
Qtable8500.VarName57 = cell2mat(rawNumericColumns(:, 57));
Qtable8500.VarName58 = cell2mat(rawNumericColumns(:, 58));
Qtable8500.VarName59 = cell2mat(rawNumericColumns(:, 59));
Qtable8500.VarName60 = cell2mat(rawNumericColumns(:, 60));
Qtable8500.VarName61 = rawStringColumns(:, 1);

